@page "/dx"

<h1>Hello, world!</h1>

<div>
    <div><h4>DXButton</h4></div>
    <div>
        <DXButton text="@this.Text" hint="Example Hint"
                  type="@DXButton.ButtonType.success.ToString()"
                  icon="check"
                  onclick="@Clicked"></DXButton>
    </div>
</div>

@*<br />
<div>
    <div><h4>DXCalendar</h4></div>
    <div>
        <DXCalendar onValueChanged="@ValueChanged"></DXCalendar>
    </div>
</div>

<br />
<div>
    <div><h4>DXColorBox</h4></div>
    <div>
        <DXColorBox onValueChanged="@ValueChanged"
                    applyButtonText="apply button"
                    disabled="@colorboxDisabled"></DXColorBox>

        <DXButton text="Disable/Enable"
                  onclick="(x => { colorboxDisabled = !colorboxDisabled; this.StateHasChanged(); })"></DXButton>
    </div>
</div>*@

<br />
<div>
    <div>DXAccordion</div>
    <div>
        <DXAccordion dataSource="this.listString">
            <DXAccordion.itemTitleTemplate WithParams="item">
                title @item.itemIndex @item.itemData
            </DXAccordion.itemTitleTemplate>

            <DXAccordion.itemTemplate WithParams="item2">
                item @item2.itemIndex @item2.itemData
                <DXCheckBox text="chk"></DXCheckBox>
                <button onclick="@(x => remove(item2.itemIndex))">remove</button>
            </DXAccordion.itemTemplate>
        </DXAccordion>
    </div>
</div>

@*<br />
<div>
    <div>DXCheckBox</div>
    <div>
        <DXCheckBox text="chk"></DXCheckBox>
    </div>
</div>

<br />
<div>
    <div>DXCheckBox</div>
    <div>
        <DXList dataSource="this.listString" itemDeleteMode="@ItemDeleteMode.Toggle" allowItemDeleting="true">
            <DXList.itemTemplate WithParams="item">
                prova
                <DXCheckBox text="chk"></DXCheckBox>
                @item.itemData
            </DXList.itemTemplate>
        </DXList>
    </div>
</div>

<br />
<div>
    <div>DXLookUp</div>
    <div>
        <DXLookUp dataSource="this.listString2" onOpened="onOpened">
            <DXLookUp.itemTemplate WithParams="item">
                test @item.itemData
            </DXLookUp.itemTemplate>

            <DXLookUp.titleTemplate>
                this is the title
            </DXLookUp.titleTemplate>
        </DXLookUp>
    </div>
</div>

<br />
<div>
    <div>DXDateBox</div>
    <div>
        <DXDateBox value="@data"
                   onValueChanged="(x) => { this.SetData(System.DateTime.Parse((string)x.Value)); }"></DXDateBox>
        @data
    </div>
</div>
*@

<div>
    <span disabled="@colorboxDisabled">
        @colorboxDisabled
    </span>
</div>

@functions {
  string Text = "Example Button";
  bool colorboxDisabled = true;
  List<string> listString;
  List<string> listString2;
  System.DateTime data = System.DateTime.Now;

  protected override void OnInit()
  {
      listString = new List<string>();
      listString.Add("1");
      listString.Add("2");
      //listString.Add("3");
      //listString.Add("4");
      //listString.Add("5");


      base.OnInit();
  }

  protected void SetData(System.DateTime NewData)
  {
      this.data = NewData;
      this.StateHasChanged();
  }

  protected void remove(int index)
  {
      listString.RemoveAt(index);
      listString = new List<string>(listString);

      this.StateHasChanged();
  }

  private int c = 1;

  protected void Clicked(UICustomEventArgs e)
  {
      Text += " Clicked!";
      Console.WriteLine($"Click! {e.Type} {e.Value}");

      // need to be immutable
      listString = new List<string>(listString);
      listString.Add($"{c++}xxx");
      //listString.Add($"{c++}xxx");
      //listString.Add($"{c++}xxx");
      //listString.Add($"{c++}xxx");

      this.StateHasChanged();
  }

  protected void ValueChanged(UICustomEventArgs e)
  {
      Console.WriteLine($"ValueChanged! {e.Type} {e.Value}");
      this.StateHasChanged();
  }

  protected void onOpened(UICustomEventArgs e)
  {
      Console.WriteLine("onOpened");
      this.listString2 = this.listString;
      this.StateHasChanged();
  }
}