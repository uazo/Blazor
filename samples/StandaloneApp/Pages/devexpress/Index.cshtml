@page "/dx"

<h1>Hello, world!</h1>

Welcome to your new app.

<DXButton text="@this.Text" hint="Example Hint"
          type="@DXButton.ButtonType.success.ToString()"
          icon="check"
          onclick="@Clicked"></DXButton>

@*<div>
        <DXCalendar onValueChanged="@ValueChanged"></DXCalendar>
    </div>*@

<div>
    @*<DXColorBox onValueChanged="@ValueChanged"
                    applyButtonText="apply button"
                    disabled="@colorboxDisabled"></DXColorBox>
        <DXButton text="Disable/Enable"
                  onclick="(x => { colorboxDisabled = !colorboxDisabled; this.StateHasChanged(); })"></DXButton>*@
    <span disabled="@colorboxDisabled">
        @colorboxDisabled
    </span>

    <DXAccordion dataSource="this.listString">
        <itemTitleTemplate>
            @{
                var item = builder2_Param1 as StandaloneApp.DXTemplateItem;
            }
            title @item.itemIndex @item.itemData
        </itemTitleTemplate>

        <itemTemplate>
            @{
                var item2 = builder2_Param1 as StandaloneApp.DXTemplateItem;
            }
            item @item2.itemIndex @item2.itemData
            <button onclick="@(x => remove(item2.itemIndex))">remove</button>
        </itemTemplate>
    </DXAccordion>
</div>



@functions {
string Text = "Example Button";
bool colorboxDisabled = true;
List<string> listString;

protected override void OnInit()
{
    listString = new List<string>();
    listString.Add("1");
    listString.Add("2");
    //listString.Add("3");
    //listString.Add("4");
    //listString.Add("5");

    base.OnInit();
}

protected void remove(int index)
{
    listString.RemoveAt(index);
    listString = new List<string>(listString);

    this.StateHasChanged();
}

private int c = 1;

protected void Clicked(UICustomEventArgs e)
{
    Text += " Clicked!";
    Console.WriteLine($"Click! {e.Type} {e.Value}");

    // need to be immutable
    listString = new List<string>(listString);
    listString.Add($"{c++}xxx");
    listString.Add($"{c++}xxx");
    listString.Add($"{c++}xxx");
    listString.Add($"{c++}xxx");

    this.StateHasChanged();
}

protected void ValueChanged(UICustomEventArgs e)
{
    Console.WriteLine($"ValueChanged! {e.Type} {e.Value}");
    this.StateHasChanged();
}
}