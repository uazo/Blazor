// Generated by dts-bundle v0.7.3

export class BlazorDOMComponent extends BlazorDOMElement {
    ComponentID: number;
    constructor(CID: number, parent: BlazorDOMElement, childIndex: number, br: BrowserRenderer);
    getClosestDomElement(): Node;
    protected isComponent(): boolean;
    protected setAttribute(attributeName: string, attributeValue: string | null): void;
    protected raiseEvent(eventHandlerId: number, evt: EventForDotNet<UIEventArgs>): void;
}

export function registerCustomTag(identifier: string, implementation: Function): void;
export function getRegisteredCustomTag(identifier: string): Function | null;
export function registerCustomDOMElement(identifier: number, implementation: Function): void;
export function getRegisteredCustomDOMElement(identifier: number): Function | null;

export class EventForDotNet<TData extends UIEventArgs> {
    readonly type: EventArgsType;
    readonly data: TData;
    constructor(type: EventArgsType, data: TData);
    static fromDOMEvent(event: Event): EventForDotNet<UIEventArgs>;
}
export type EventArgsType = 'change' | 'clipboard' | 'drag' | 'error' | 'focus' | 'keyboard' | 'mouse' | 'pointer' | 'progress' | 'touch' | 'unknown' | 'wheel' | 'custom';
export interface UIEventArgs {
    type: string;
}

export class BrowserRenderer {
    eventDelegator: EventDelegator;
    readonly browserRendererId: number;
    constructor(rendererId: number);
    attachRootComponentToElement(componentId: number, element: Element): void;
    updateComponent(batch: RenderBatch, componentId: number, edits: ArraySegment<RenderTreeEdit>, referenceFrames: ArrayValues<RenderTreeFrame>): void;
    disposeComponent(componentId: number): void;
    disposeEventHandler(eventHandlerId: number): void;
}
export function raiseEvent(event: Event | null, browserRendererId: number, componentId: number, eventHandlerId: number, eventArgs: EventForDotNet<UIEventArgs>): Promise<void>;

export class BlazorDOMElement {
    protected readonly browserRenderer: BrowserRenderer;
    constructor(browserRendeder: BrowserRenderer, start: Node, end?: Node | null);
    protected isComponent(): boolean;
    getClosestDomElement(): Node;
    protected getDOMElement(): HTMLElement;
    getLogicalChild(childIndex: number): Node | BlazorDOMElement | null;
    createElement(tagName: string, childIndex: number): Element;
    insertNodeIntoDOM(node: Node, childIndex: number): void;
    removeFromDom(childIndex?: number | null): void;
    updateText(childIndex: number, newText: string | null): void;
    applyAttribute(batch: RenderBatch, componentId: number, attributeFrame: RenderTreeFrame): void;
    protected removeAttributeValue(attributeName: string): void;
    removeAttribute(childIndex: number, attributeName: string): void;
    protected setAttribute(attributeName: string, attributeValue: string | null): void;
    protected isDOMAttribute(attributeName: string, value: string | null): boolean;
    protected isDOMAttributeEvent(attributeName: string): boolean;
    protected applyEvent(attributeName: string, componentId: number, eventHandlerId: number): boolean;
    onDOMUpdating(): void;
    onDOMUpdated(): void;
    onChildAttached(child: BlazorDOMElement): void;
    dispose(): void;
}
export function getBlazorDomElement(container: Node): BlazorDOMElement | null;

export interface RenderBatch {
    updatedComponents(): ArrayRange<RenderTreeDiff>;
    referenceFrames(): ArrayRange<RenderTreeFrame>;
    disposedComponentIds(): ArrayRange<number>;
    disposedEventHandlerIds(): ArrayRange<number>;
    updatedComponentsEntry(values: ArrayValues<RenderTreeDiff>, index: number): RenderTreeDiff;
    referenceFramesEntry(values: ArrayValues<RenderTreeFrame>, index: number): RenderTreeFrame;
    disposedComponentIdsEntry(values: ArrayValues<number>, index: number): number;
    disposedEventHandlerIdsEntry(values: ArrayValues<number>, index: number): number;
    diffReader: RenderTreeDiffReader;
    editReader: RenderTreeEditReader;
    frameReader: RenderTreeFrameReader;
    arrayRangeReader: ArrayRangeReader;
    arraySegmentReader: ArraySegmentReader;
}
export interface ArrayRangeReader {
    count<T>(arrayRange: ArrayRange<T>): number;
    values<T>(arrayRange: ArrayRange<T>): ArrayValues<T>;
}
export interface ArraySegmentReader {
    offset<T>(arraySegment: ArraySegment<T>): number;
    count<T>(arraySegment: ArraySegment<T>): number;
    values<T>(arraySegment: ArraySegment<T>): ArrayValues<T>;
}
export interface RenderTreeDiffReader {
    componentId(diff: RenderTreeDiff): number;
    edits(diff: RenderTreeDiff): ArraySegment<RenderTreeEdit>;
    editsEntry(values: ArrayValues<RenderTreeEdit>, index: number): RenderTreeEdit;
}
export interface RenderTreeEditReader {
    editType(edit: RenderTreeEdit): EditType;
    siblingIndex(edit: RenderTreeEdit): number;
    newTreeIndex(edit: RenderTreeEdit): number;
    removedAttributeName(edit: RenderTreeEdit): string | null;
}
export interface RenderTreeFrameReader {
    frameType(frame: RenderTreeFrame): FrameType;
    subtreeLength(frame: RenderTreeFrame): number;
    elementReferenceCaptureId(frame: RenderTreeFrame): string | null;
    componentId(frame: RenderTreeFrame): number;
    elementName(frame: RenderTreeFrame): string | null;
    textContent(frame: RenderTreeFrame): string | null;
    attributeName(frame: RenderTreeFrame): string | null;
    attributeValue(frame: RenderTreeFrame): string | null;
    attributeEventHandlerId(frame: RenderTreeFrame): number;
    customComponentType(frame: RenderTreeFrame): number;
    hasAttributeValueJson(frame: RenderTreeFrame): boolean;
    attributeValueJson(frame: RenderTreeFrame): string | null;
}
export interface ArrayRange<T> {
    ArrayRange__DO_NOT_IMPLEMENT: any;
}
export interface ArraySegment<T> {
    ArraySegment__DO_NOT_IMPLEMENT: any;
}
export interface ArrayValues<T> {
    ArrayValues__DO_NOT_IMPLEMENT: any;
}
export interface RenderTreeDiff {
    RenderTreeDiff__DO_NOT_IMPLEMENT: any;
}
export interface RenderTreeFrame {
    RenderTreeFrame__DO_NOT_IMPLEMENT: any;
}
export interface RenderTreeEdit {
    RenderTreeEdit__DO_NOT_IMPLEMENT: any;
}
export enum EditType {
    prependFrame = 1,
    removeFrame = 2,
    setAttribute = 3,
    removeAttribute = 4,
    updateText = 5,
    stepIn = 6,
    stepOut = 7
}
export enum FrameType {
    element = 1,
    text = 2,
    attribute = 3,
    component = 4,
    region = 5,
    elementReferenceCapture = 6
}

export interface OnEventCallback {
    (event: Event, componentId: number, eventHandlerId: number, eventArgs: EventForDotNet<UIEventArgs>): void;
}
export class EventDelegator {
    constructor(onEvent: OnEventCallback);
    setListener(element: Element, eventName: string, componentId: number, eventHandlerId: number): void;
    removeListener(eventHandlerId: number): void;
}

