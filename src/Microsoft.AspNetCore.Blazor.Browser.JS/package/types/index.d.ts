// Generated by dts-bundle v0.7.3

export class BlazorDOMComponent extends BlazorDOMElement {
    ComponentID: number;
    constructor(CID: number, parent: BlazorDOMElement, childIndex: number, br: BrowserRenderer);
    getClosestDomElement(): Node;
    protected isComponent(): boolean;
    protected setAttribute(attributeName: string, attributeValue: string | null): void;
    protected raiseEvent(eventHandlerId: number, evt: EventForDotNet<UIEventArgs>): void;
}

export function registerFunction(identifier: string, implementation: Function): void;
export function getRegisteredFunction(identifier: string): Function;

export function registerCustomTag(identifier: string, implementation: Function): void;
export function getRegisteredCustomTag(identifier: string): Function | null;
export function registerCustomDOMElement(identifier: number, implementation: Function): void;
export function getRegisteredCustomDOMElement(identifier: number): Function | null;

export class EventForDotNet<TData extends UIEventArgs> {
    readonly type: EventArgsType;
    readonly data: TData;
    constructor(type: EventArgsType, data: TData);
    static fromDOMEvent(event: Event): EventForDotNet<UIEventArgs>;
}
export type EventArgsType = 'change' | 'clipboard' | 'drag' | 'error' | 'focus' | 'keyboard' | 'mouse' | 'pointer' | 'progress' | 'touch' | 'unknown' | 'wheel' | 'custom';
export interface UIEventArgs {
    type: string;
}

export class BrowserRenderer {
    eventDelegator: EventDelegator;
    readonly browserRendererId: number;
    constructor(rendererId: number);
    attachRootComponentToElement(componentId: number, element: Element): void;
    updateComponent(componentId: number, edits: System_Array<RenderTreeEditPointer>, editsOffset: number, editsLength: number, referenceFrames: System_Array<RenderTreeFramePointer>): void;
    disposeComponent(componentId: number): void;
    disposeEventHandler(eventHandlerId: number): void;
}
export function raiseEvent(event: Event | null, browserRendererId: number, componentId: number, eventHandlerId: number, eventArgs: EventForDotNet<UIEventArgs>): void;

export class BlazorDOMElement {
    protected readonly browserRenderer: BrowserRenderer;
    constructor(browserRendeder: BrowserRenderer, start: Node, end?: Node | null);
    protected isComponent(): boolean;
    getClosestDomElement(): Node;
    protected getDOMElement(): HTMLElement;
    getLogicalChild(childIndex: number): Node | BlazorDOMElement | null;
    insertNodeIntoDOM(node: Node, childIndex: number): void;
    removeFromDom(childIndex?: number | null): void;
    updateText(childIndex: number, newText: string | null): void;
    applyAttribute(componentId: number, attributeFrame: RenderTreeFramePointer): void;
    removeAttribute(childIndex: number, attributeName: string): void;
    protected setAttribute(attributeName: string, attributeValue: string | null): void;
    protected isDOMAttribute(attributeName: string, value: string | null): boolean;
    protected isDOMAttributeEvent(attributeName: string): boolean;
    protected applyEvent(attributeName: string, componentId: number, eventHandlerId: number): boolean;
    onDOMUpdating(): void;
    onDOMUpdated(): void;
    dispose(): void;
}
export function getBlazorDomElement(container: Node): any;

export interface Platform {
    start(loadAssemblyUrls: string[]): Promise<void>;
    callEntryPoint(assemblyName: string, entrypointMethod: string, args: (System_Object | null)[]): any;
    findMethod(assemblyName: string, namespace: string, className: string, methodName: string): MethodHandle;
    callMethod(method: MethodHandle, target: System_Object | null, args: (System_Object | null)[]): System_Object;
    toJavaScriptString(dotNetString: System_String): string;
    toDotNetString(javaScriptString: string): System_String;
    toUint8Array(array: System_Array<any>): Uint8Array;
    getArrayLength(array: System_Array<any>): number;
    getArrayEntryPtr<TPtr extends Pointer>(array: System_Array<TPtr>, index: number, itemSize: number): TPtr;
    getObjectFieldsBaseAddress(referenceTypedObject: System_Object): Pointer;
    readInt32Field(baseAddress: Pointer, fieldOffset?: number): number;
    readInt16Field(baseAddress: Pointer, fieldOffset?: number): number;
    readFloatField(baseAddress: Pointer, fieldOffset?: number): number;
    readObjectField<T extends System_Object>(baseAddress: Pointer, fieldOffset?: number): T;
    readStringField(baseAddress: Pointer, fieldOffset?: number): string | null;
    readStructField<T extends Pointer>(baseAddress: Pointer, fieldOffset?: number): T;
}
export interface MethodHandle {
    MethodHandle__DO_NOT_IMPLEMENT: any;
}
export interface System_Object {
    System_Object__DO_NOT_IMPLEMENT: any;
}
export interface System_String extends System_Object {
    System_String__DO_NOT_IMPLEMENT: any;
}
export interface System_Array<T> extends System_Object {
    System_Array__DO_NOT_IMPLEMENT: any;
}
export interface Pointer {
    Pointer__DO_NOT_IMPLEMENT: any;
}

export function getRenderTreeEditPtr(renderTreeEdits: System_Array<RenderTreeEditPointer>, index: number): RenderTreeEditPointer;
export const renderTreeEdit: {
    type: (edit: RenderTreeEditPointer) => EditType;
    siblingIndex: (edit: RenderTreeEditPointer) => number;
    newTreeIndex: (edit: RenderTreeEditPointer) => number;
    removedAttributeName: (edit: RenderTreeEditPointer) => string | null;
};
export enum EditType {
    prependFrame = 1,
    removeFrame = 2,
    setAttribute = 3,
    removeAttribute = 4,
    updateText = 5,
    stepIn = 6,
    stepOut = 7,
}
export interface RenderTreeEditPointer extends Pointer {
    RenderTreeEditPointer__DO_NOT_IMPLEMENT: any;
}

export function getTreeFramePtr(renderTreeEntries: System_Array<RenderTreeFramePointer>, index: number): RenderTreeFramePointer;
export const renderTreeFrame: {
    frameType: (frame: RenderTreeFramePointer) => FrameType;
    subtreeLength: (frame: RenderTreeFramePointer) => FrameType;
    elementReferenceCaptureId: (frame: RenderTreeFramePointer) => number;
    componentId: (frame: RenderTreeFramePointer) => number;
    elementName: (frame: RenderTreeFramePointer) => string | null;
    textContent: (frame: RenderTreeFramePointer) => string | null;
    attributeName: (frame: RenderTreeFramePointer) => string | null;
    attributeValue: (frame: RenderTreeFramePointer) => string | null;
    attributeEventHandlerId: (frame: RenderTreeFramePointer) => number;
    customComponentType: (frame: RenderTreeFramePointer) => number;
};
export enum FrameType {
    element = 1,
    text = 2,
    attribute = 3,
    component = 4,
    region = 5,
    elementReferenceCapture = 6,
}
export interface RenderTreeFramePointer extends Pointer {
    RenderTreeFramePointer__DO_NOT_IMPLEMENT: any;
}

export interface OnEventCallback {
    (event: Event, componentId: number, eventHandlerId: number, eventArgs: EventForDotNet<UIEventArgs>): void;
}
export class EventDelegator {
    constructor(onEvent: OnEventCallback);
    setListener(element: Element, eventName: string, componentId: number, eventHandlerId: number): void;
    removeListener(eventHandlerId: number): void;
}

